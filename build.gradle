/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
plugins {
    id 'com.bmuschko.clover' version '2.2.3'
    id 'application'
}
subprojects{
    apply plugin: "java"
    apply plugin: "com.bmuschko.clover"
    apply plugin: "application"
    repositories {
        jcenter()
    }

    dependencies {
        implementation 'com.google.guava:guava:28.0-jre'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
        clover 'org.openclover:clover:4.3.1'
        testCompile "org.mockito:mockito-core:2.+"
    }
    clover{
    compiler{
        additionalArgs = "-g:lines,source,vars"
    }
    }
    test{
        testLogging{
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }
    test {
        // Use junit platform for unit tests
        useJUnitPlatform()
    }
    run {
    standardInput = System.in
}
}


// Project specific stuff
project (':shared'){
}
project (':server'){
    dependencies {
        implementation project(':shared')
    }
}
project (':client'){
    dependencies {
        implementation project(':shared')
    } 
}

dependencies {
    // implementation 'junit:junit:4.12'
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.0-jre'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'

    clover 'org.openclover:clover:4.3.1'
}

tasks.register("run-server") {
    dependsOn project('server').getTasksByName('run',false)
    group = 'Run Client/Server'
    description = 'Run the Server'
}

tasks.register("run-client") {
    dependsOn project('client').getTasksByName('run',false)
    group = 'Run Client/Server'
    description = 'Run the Client'
}

run {
    standardInput = System.in
}

